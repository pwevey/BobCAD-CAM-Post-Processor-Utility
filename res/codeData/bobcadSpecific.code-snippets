{
        // BobCAD API Specific VBScript Snippets
		"Set Memory Location (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Set Memory Loc",
			"body": [
				"${1|MILL,LATHE|}_${2|SetIntMemoryLoc,SetDoubleMemoryLoc,SetStringMemoryLoc|}(${3:indexOfMemoryLoc}, ${4:setValueTo})"
			],
			"description": "MILL/Lathe Set Int/Double/String Memory Loc (BobCAD / VBScript)"
		},
		"Get Memory Location (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Get Memory Loc",
			"body": [
				"${1|MILL,LATHE|}_${2|GetIntMemoryLoc,GetDoubleMemoryLoc,GetStringMemoryLoc|}(${3:indexOfMemoryLoc})"
			],
			"description": "MILL/Lathe Get Int/Double/String Memory Loc (BobCAD / VBScript)"
		},
		"Get Number of Memory Loc (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Get Num Memory Locs",
			"body": [
				"MILL_${2|GetNumberOfIntMemoryLoc,GetNumberOfDoubleMemoryLoc,GetNumberOfStringMemoryLoc|}()"
			],
			"description": "MILL Get Int/Double/String Number of Memory Locations (BobCAD / VBScript)"
		},
		"Set Return String (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Set Return String",
			"body": [
				"CALL ${1|MILL,LATHE|}_SetReturnString(\" ${2:prefix}\" & ${3:VBSciptStringVar})"
			],
			"description": "MILL/LATHE Set Return String allows you to return a string from a program block (2001 - 2099) in the post processor to a normal post block using program_block_# (eg. if in block 2001, use program_block_1 in a normal post block), program_block_# can go on the same line as other post variables (eg. \"G75\",groove_x_bottom,groove_z_bottom,program_block_3,program_block_4,f) (BobCAD / VBScript)"
		},
		"Post Process Line (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Post Process Line EXAMPLE",
			"body": [
				"${1|MILL,LATHE|}_ProcessPostLine(\"n,g_arc_move,x_f,z_f,'I\"&${2:arcIValueVBScriptVar}&\"','K\"&${3:arcKValueVBScriptVar}&\"',feed_rate\")"
			],
			"description": "Outputs a line in your g-code program using program blocks (2001 - 2099). (eg. if in block 2001, use program_block_1 in a normal post block to output it.) program_block_# should be output on its own line in the post block. Input must be a string formatted exactly as a posting line using system posting variables. (Example: “n, rapid_move, xr, yr, ‘M08’”). If calling a vbscript variable inside the PostProcessLine use the following format: 'prefix\"&VBScriptVar&\"' (BobCAD / VBScript)"
		},
		// BobCAD Post Variable / Post Block Snippets
		"feedrate forced (BobCAD)": {
			"scope": "bcpst",
			"prefix": "feedrate forced",
			"body": [
				"force_feed_rate_on",
				"${1:yourPostVarsHere},f",
				"force_feed_rate_off"
			],
			"description": "Post Variable Format: Force feedrate to output in a certain section of a post block by adding force_feed_rate_on and force_feed_rate_off"
		},
		"add comment (BobCAD)": {
			"scope": "bcpst",
			"prefix": "comment add to NC File",
			"body": [
				"comment_start,${1:addCommentsToOutputinNCFile},comment_end"
			],
			"description": "Post Variable Format: Add comments to the NC file by adding comment_start and comment_end"
		},
		"User Comment (BobCAD)": {
			"scope": "bcpst",
			"prefix": "user comment add to NC File",
			"body": [
				"user_comment_1",
				"user_comment_2",
				"user_comment_3",
				"user_comment_4",
				"user_comment_5",
				"user_comment_6",
				"user_comment_7",
				"user_comment_8",
				"user_comment_9",
				"user_comment_10",
				"user_comment_11",
				"user_comment_12",
				"user_comment_13",
				"user_comment_14",
				"user_comment_15"
			],
			"description": "Post Variable Format: Add user comments to post block 0. File Header. User Comments are set in Current Settings > Comments in the software."
		},
		"Post Header Comment": {
			"scope": "bcpst",
			"prefix": "comment post header",
			"body": [
			  "//---------------------------------------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//---BobCAD-CAM Post Processor ----------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//-- Initial Software Version: BobCAD-CAM ${1:BCC V31}",
			  "//-- Initial Creation Date: ${2:7/31/2018}",
			  "//-- Author: BobCAD-CAM",
			  "//-- Machine: ${3:BC_3x_Mill}",
			  "//---------------------------------------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//-- REVISION LOG -----------------------------------------------------",
			  "//--",
			  "//--",
			  "//---------------------------------------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//-- SPECIAL NOTES ABOUT THIS POST AND MACHINE ------------------------",
			  "//---------------------------------------------------------------------",
			  "//--",
			  "//--",
			  "//---------------------------------------------------------------------"
			],
			"description": "Post Processor Format: This snippet inserts a standard header comment at the top of the file for a BobCAD-CAM post processor."
		  }
		// Formatting Post Variable Output
		"Format 1 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (leading trailing)",
			"body": [
				"'[${1:assignLeadingDigits}.${2:assignTrailingDigits}L]' ${3:postVariableName}"
			],
			"description": "Post Variable Format: Allows you to format the leading and trailing digits on both sides of the deciaml of a post variable. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 2 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (leading)",
			"body": [
				"'[${1:assignLeadingDigits}.L]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Allows you to assign the leading digits keeping the trailing digits untouched of a post variable. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 3 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (leading) (no trailing)",
			"body": [
				"'[${1:assignLeadingDigits}L]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Commonly used if you need to output a whole number (integer) of a post variable. This format will round up or down. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 4 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (trailing)",
			"body": [
				"'[.${1:assignTrailingDigits}T]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Allows you to to assign the trailing digits and leave the leading digits untouched of a post variable. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 5 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (trailing) (multiplier)",
			"body": [
				"'[${1:assignTrailing}T]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Commonly used as a multiplier by factors of 10 (1T: x10, 2T: x100,3T: x1,000, etc..) of a post variable. for example, take the number 9.5118. If you assign the trailing digits to 3 (eg. '[3T]'), this will move the decimal 3 places to the right, round and remove the decimal. Output = 9512  The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		// BobCAD API Specific Lua Snippets (Post Processors)
		"Output Text (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.OutputText",
			"body": [
				"BcPost.OutputText(\"${1:HERE IS SOME TEXT IN YOUR NC PROGRAM}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to output a string of text inside the NC program. Parameters: text – string value of the text to output in the NC program"
		},
		"ProcessPostLine (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.ProcessPostLine",
			"body": [
				"BcPost.ProcessPostLine(\"${1:n,rapid_move_forced, 'X\"..xValLuaVar..\"','Y\"..yValLuaVar..\"'}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. (Example: “n, rapid_move, xr, yr, ‘M08’”). The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file.  Parameters: postString – string value of the text to output in the NC program."
		},
		"Run Post Line (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunPostLine",
			"body": [
				"BcPost.RunPostLine(\"${1:n, rapid_move, xr, yr, 'M08'}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file. A newline character will be added to the end of the output code.  Parameters: postString – string value of the text to output in the NC program."
		},
		"Run Block (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunBlock",
			"body": [
				"-- Call block $1. ${2:Cutter compensation left to output cutter comp on}",
				"BcPost.RunBlock(${1:12})"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. (Example: “n, rapid_move, xr, yr, ‘M08’”). The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file.  Parameters: blockNum – integer value of the posting block that should be called."
		},
		"Run Post Vars (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunPostVariables",
			"body": [
				"BcPost.RunPostVariables(\"${1:xr, yr}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file.   Parameters: postString – string value of the text to output in the NC program."
		},
		"RunVBScript Ex (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBScript EXAMPLE",
			"body": [
				"-- This small example shows the need for the \\n newline characters and how to return a value",
				"${1:test} = BcPost.RunVBScript(\"${2:a=17 \\n b=12 \\n c=a+b \\n CALL MILL_SetReturnString(c)}\")",
				"Bcc.ShowMessageBox($1, {Title = \"${3:Lua calling VB}\"})"
			],
			"description": "BobCAD Post Lua API: This function allows you to pass VB scripting code via the Lua engine.  Because our posting engine has always had the VB Scripting for applications engine in it for many years, we implemented this call just in case any existing code would want to be reused. IMPORTANT:  The syntax handling for this is important, as it is actually Lua parsing by passing a string and then VB all from our C++ code base, you must be a little stringent on your characters specifically when dealing with quotes and new line characters.  Parameters: code – string containing the VBScript code that should be run.  Return: Will return the output of the VBScript code in a string format when using the MILL_SetReturnString() function that exists in our VB scripting language."
		},
		"Run VBScript (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBScript",
			"body": [
				"BcPost.RunVBScript(\"${1:MsgBox(\\\"Hi from VB Lua\\\")}\")"
			],
			"description": "BobCAD Post Lua API: This function allows you to pass VB scripting code via the Lua engine.  Because our posting engine has always had the VB Scripting for applications engine in it for many years, we implemented this call just in case any existing code would want to be reused. IMPORTANT:  The syntax handling for this is important, as it is actually Lua parsing by passing a string and then VB all from our C++ code base, you must be a little stringent on your characters specifically when dealing with quotes and new line characters.  Parameters: code – string containing the VBScript code that should be run.  Return: Will return the output of the VBScript code in a string format when using the MILL_SetReturnString() function that exists in our VB scripting language."
		},
		"Run VBApi 1 para (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBApi (1 param)",
			"body": [
				"-- Get the string from memory location $2",
				"BcPost.RunVBApi(\"${1:MILL_GetStringMemoryLoc}\", ${2:10})"
			],
			"description": "BobCAD Post Lua API: This function can be utilized for calling an existing VB API call from the posting engine. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete list of the VB APIs. IMPORTANT:  This function exists to fully support all of our VB API functions and will be the primary always working method.  With that being said it is also important to note that any VB API that we created prior to BobCAD-CAM V32 you can also simply just use BcPost.vbAPIname().   Parameters: vbApiName – any existing VB function name as a string that has been implemented to work in the BobCAD posting engine. vbInputParas - the input value to the VB function.  For almost all BobCAD posting API's they all only have a single input parameter.  For the few instances where the VB API requires multiple input parameters (eg. MILL_SetIntMemoryLocation(index, integer)) this parameter should be a table containing the various inputs."
		},
		"Run VBApi 2 para (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBApi (2 param)",
			"body": [
				"-- Get the string from memory location $2",
				"BcPost.RunVBApi(\"${1:MILL_SetStringMemoryLoc}\", {${2:10},\"${3:Save Me}\"})"
			],
			"description": "BobCAD Post Lua API: This function can be utilized for calling an existing VB API call from the posting engine. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete list of the VB APIs. IMPORTANT:  This function exists to fully support all of our VB API functions and will be the primary always working method.  With that being said it is also important to note that any VB API that we created prior to BobCAD-CAM V32 you can also simply just use BcPost.vbAPIname().   Parameters: vbApiName – any existing VB function name as a string that has been implemented to work in the BobCAD posting engine. vbInputParas - the input value to the VB function.  For almost all BobCAD posting API's they all only have a single input parameter.  For the few instances where the VB API requires multiple input parameters (eg. MILL_SetIntMemoryLocation(index, integer)) this parameter should be a table containing the various inputs."
		},
		"Get Val DataBlock (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfDataBlock",
			"body": [
				"BcPost.GetValueOfDataBlock(${1:blockNumber})"
			],
			"description": "BobCAD Post Lua API: This is function is utilized to get the value defined for a Post Question from the post processor. At the time of this writing we currently know that post questions in blocks 750-999 do not return any value.  This is planned to be addressed.  Parameters: blockNumber – integer value of the block number you wish to retrieve the data from. Return: The value of the requested posting variable which can be various types depending on the block number requested."
		},
		"Set Val DataBlock (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.SetValueOfDataBlock",
			"body": [
				"BcPost.SetValueOfDataBlock(${1:blockNumber}, ${2:value})"
			],
			"description": "BobCAD Post Lua API: This is function is utilized to set the value defined for a Post Question from the post processor. See Lua Help System for info on post questions that cannot be altered during posting as they are utilized during the CL file creation. Parameters: blockNumber – string value of the BobCAD posting variable name. value - the value to assign to the post question. Note: for the boolean post blocks which use y / n as the item in the post processor, you must use true or false in this function."
		},
		"Get Val PostVar (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfPostVariable",
			"body": [
				"${2:luaVarName} = BcPost.GetValueOfPostVariable(${1:postVariable})"
			],
			"description": "BobCAD Post Lua API: This function is utilized get the current value of existing native posting engine variable at the current time this function is called.  This API does not currently support all of the BobCAD posting engine variables, and a list of the supported variables can be found in the BobCAD Lua Help System. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete description of the posting variables and VB APIs. Parmeters: postVariable – string value of the BobCAD posting variable name. Return: The value of the requested posting variable"
		},
		"Set Val PostVar (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfPostVariable",
			"body": [
				"BcPost.SetValueOfPostVariable(${1:postVariable}, ${2:value})"
			],
			"description": "CURRENTLY NOT IMPLEMENTED! BobCAD Post Lua API: This function is utilized set the current value of any existing native posting engine variable at the current time this function is called. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete list of the VB APIs. Parameters: postVariable – string value of the BobCAD posting variable name. value - the value to assign to the posting variable"
		},
		"Get Val Op (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation",
			"body": [
				"BcPost.GetValueOfOperation(${1:paramName})"
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex1 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 1)",
			"body": [
				"-- Get the current operations type value in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"Type\")",
				"Bcc.ShowMessageBox(\"Operation Type: \"..value, {Title=\"Operation Type\"})"		  
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex2 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 2)",
			"body": [
				"-- Get the current operations job name in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"JobName\")",
				"Bcc.ShowMessageBox(\"Job Name: \"..value, {Title=\"Job Name\"})"				
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex3 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 3)",
			"body": [
				"-- Get the current operations feature name in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"FeatureName\")",
				"Bcc.ShowMessageBox(\"Feature Name: \"..value, {Title=\"Feature Name\"})"						  
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex4 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 4)",
			"body": [
				"-- Get the current operations name in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"OperationName\")",
				"Bcc.ShowMessageBox(\"Operation Name: \"..value, {Title=\"Operation Name\"})"							
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		// BobCAD Lua API Specific Snippets (General)
		"Message Box (basic) (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "Bcc.ShowMessageBox (basic)",
			"body": [
				"Bcc.ShowMessageBox(\"${1:Here is my message}\")"						
			],
			"description": "BobCAD Lua API: Displays a message box to the user. Go to BobCAD Lua API Help System to learn more. (CTRL+SHIFT+P > BobCAD Post Utility: Open Lua API Help System)"
		},
		"Message Box (Ex1) (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "Bcc.ShowMessageBox (Ex 1)",
			"body": [
				"Bcc.ShowMessageBox(\"${1:This went bad}\", {ButtonType=\"${2:OK}\", ImageType=\"${3:Error}\"})"						
			],
			"description": "BobCAD Lua API: Displays a message box to the user. Go to BobCAD Lua API Help System to learn more. (CTRL+SHIFT+P > BobCAD Post Utility: Open Lua API Help System)"
		},
		"Message Box (Ex2) (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "Bcc.ShowMessageBox (Ex 2)",
			"body": [
				"ret = Bcc.ShowMessageBox(\"${1:Error 111}\", {ButtonType=\"${2:YesNoCancel}\", ImageType=\"${3:Exclamation}\", Title = \"${4:Warning}\"})"						
			],
			"description": "BobCAD Lua API: Displays a message box to the user. Go to BobCAD Lua API Help System to learn more. (CTRL+SHIFT+P > BobCAD Post Utility: Open Lua API Help System)"
		},
		"Full Lua Block (BobCAD / Lua)": {
			  "scope": "bcpst, lua",
			  "prefix": "lua block full example",
			  "body": [
				"-- This scripting block is called from the 1021 feed move block in order to check",
				"-- if the cut off is at the final position of the cut off so that a dwell can",
				"-- be output from the Advanced Posting page",
				"",
				"-- Simple rounding function",
				"function round(num, numDecimalPlaces)",
				"  local mult = 10^(numDecimalPlaces or 0)",
				"  return math.floor(num * mult + 0.5) / mult",
				"end",
				"",
				"-- Make sure the current operation is the cut off operation",
				"if (BcPost.GetValueOfOperation(\"Type\") == 1012) then",
				"  -- Get the current operations ID so we can get its parameters",
				"  local opID = BcPost.GetValueOfOperation(\"ID\")",
				"",
				"  -- Get the cut off X value from the operation",
				"  local ret = Bcc.GetCamObjParameters(opID, {{\"Parameters\", \"cutoff_x\"}})",
				"",
				"  -- Round the values to 4 decimal places so I can compare if they are the same",
				"  curX = round(BcPost.GetValueOfPostVariable(\"x_f\"), 4)",
				"  cutX = round(ret.Parameters.cutoff_x, 4)",
				"",
				"  -- Check to see if this feed move is at the final cut off x position",
				"  if (curX == cutX) then",
				"    -- Get the advanced posting page checkbox values in a table",
				"    checkbox = BcPost.GetValueOfOperation(\"UserCheckBoxVariables\")",
				"",
				"    -- Get the double values from the adv posting page",
				"    editValue = BcPost.GetValueOfOperation(\"UserEditRealVariables\")",
				"",
				"    -- Get the state of the dwell checkbox",
				"    if checkbox[2] == 1 then",
				"      -- Output the dwell if the checkbox is selected",
				"      BcPost.ProcessPostLine(\"n,gdwell, 'T'\"..round(editValue[3], 4))",
				"    end",
				"  end",
				"end"
			  ],
			  "description": "BobCAD Lua API: This shows an example of how a lua block in the post processsor is setup. (This should be inside Post Blocks: 2701 - 2799). To call these blocks in the post processor, use lua_block_# (eg. if in block 2701, use lua_block_1 in a normal post block). In this example, you would place lua_block_1 at the bottom of post block 1021. Feed Move in a Lathe Post Proccessor."
			},
			"Hello World (plugin) (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "Hello World BobCAD Plugin",
				"body": [
				  "function ConnectToBCC()",
				  "  -- Add a button the ribbon to fire the Hello World function when pressed",
				  "  Bcc.AddCommand({ TabName=\"My Lua Plug-ins\", GroupName=\"Basic Examples\", ButtonName=\"Hello World\", CallbackFuncName=\"sayHelloWorld\", ImageNameLarge=\"light.png\", ImageNameSmall=\"light.png\", ToolTip=\"Say hello to the world!\" })",
				  "end",
				  "",
				  "function sayHelloWorld()",
				  "  -- Display a message box stating Hello World!",
				  "  Bcc.ShowMessageBox(\"Hello World\")",
				  "end"
				],
				"description": "BobCAD Lua API: This snippet creates a 'Hello World' plugin for BCC. It adds a button to the ribbon that, when pressed, displays a 'Hello World' message box."
			  },
			  "Hello World (post) (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "Hello World (post)",
				"body": [
				  "function sayHelloWorld()",
				  "  -- Display a message box stating Hello World!",
				  "  Bcc.ShowMessageBox(\"Hello World\")",
				  "end",
				  "",
				  "sayHelloWorld()"
				],
				"description": "BobCAD Post Lua API: This is how you can structure a simple 'Hello World' message box in a BobCAD post processor. Places in post blocks 2701 - 2799. To call these blocks in the post processor, use lua_block_# (eg. if in block 2701, use lua_block_1 in a normal post block)."
			  },
}