{
        // BobCAD API Specific VBScript Snippets
		"Set Memory Location (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Set Memory Loc",
			"body": [
				"${1|MILL,LATHE|}_${2|SetIntMemoryLoc,SetDoubleMemoryLoc,SetStringMemoryLoc|}(${3:indexOfMemoryLoc}, ${4:setValueTo})"
			],
			"description": "MILL/Lathe Set Int/Double/String Memory Loc (BobCAD / VBScript)"
		},
		"Get Memory Location (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Get Memory Loc",
			"body": [
				"${1|MILL,LATHE|}_${2|GetIntMemoryLoc,GetDoubleMemoryLoc,GetStringMemoryLoc|}(${3:indexOfMemoryLoc})"
			],
			"description": "MILL/Lathe Get Int/Double/String Memory Loc (BobCAD / VBScript)"
		},
		"Get Number of Memory Loc (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Get Num Memory Locs",
			"body": [
				"MILL_${2|GetNumberOfIntMemoryLoc,GetNumberOfDoubleMemoryLoc,GetNumberOfStringMemoryLoc|}()"
			],
			"description": "MILL Get Int/Double/String Number of Memory Locations (BobCAD / VBScript)"
		},
		"Set Return String (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Set Return String",
			"body": [
				"CALL ${1|MILL,LATHE|}_SetReturnString(\" ${2:prefix}\" & ${3:VBSciptStringVar})"
			],
			"description": "MILL/LATHE Set Return String allows you to return a string from a program block (2001 - 2099) in the post processor to a normal post block using program_block_# (eg. if in block 2001, use program_block_1 in a normal post block), program_block_# can go on the same line as other post variables (eg. \"G75\",groove_x_bottom,groove_z_bottom,program_block_3,program_block_4,f) (BobCAD / VBScript)"
		},
		"Post Process Line (BobCAD / VBScript)": {
			"scope": "bcpst, vb, vbs",
			"prefix": "Post Process Line EXAMPLE",
			"body": [
				"${1|MILL,LATHE|}_ProcessPostLine(\"n,g_arc_move,x_f,z_f,'I\"&${2:arcIValueVBScriptVar}&\"','K\"&${3:arcKValueVBScriptVar}&\"',feed_rate\")"
			],
			"description": "Outputs a line in your g-code program using program blocks (2001 - 2099). (eg. if in block 2001, use program_block_1 in a normal post block to output it.) program_block_# should be output on its own line in the post block. Input must be a string formatted exactly as a posting line using system posting variables. (Example: “n, rapid_move, xr, yr, ‘M08’”). If calling a vbscript variable inside the PostProcessLine use the following format: 'prefix\"&VBScriptVar&\"' (BobCAD / VBScript)"
		},
		// BobCAD Post Variable / Post Block Snippets
		"feedrate forced (BobCAD)": {
			"scope": "bcpst",
			"prefix": "feedrate forced",
			"body": [
				"force_feed_rate_on",
				"${1:yourPostVarsHere},f",
				"force_feed_rate_off"
			],
			"description": "Post Variable Format: Force feedrate to output in a certain section of a post block by adding force_feed_rate_on and force_feed_rate_off"
		},
		"add comment (BobCAD)": {
			"scope": "bcpst",
			"prefix": "comment add to NC File",
			"body": [
				"comment_start,${1:addCommentsToOutputinNCFile},comment_end"
			],
			"description": "Post Variable Format: Add comments to the NC file by adding comment_start and comment_end"
		},
		"User Comment (BobCAD)": {
			"scope": "bcpst",
			"prefix": "user comment add to NC File",
			"body": [
				"user_comment_1",
				"user_comment_2",
				"user_comment_3",
				"user_comment_4",
				"user_comment_5",
				"user_comment_6",
				"user_comment_7",
				"user_comment_8",
				"user_comment_9",
				"user_comment_10",
				"user_comment_11",
				"user_comment_12",
				"user_comment_13",
				"user_comment_14",
				"user_comment_15"
			],
			"description": "Post Variable Format: Add user comments to post block 0. File Header. User Comments are set in Current Settings > Comments in the software."
		},
		"Post Header Comment": {
			"scope": "bcpst",
			"prefix": "comment post header",
			"body": [
			  "//---------------------------------------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//---BobCAD-CAM Post Processor ----------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//-- Initial Software Version: BobCAD-CAM ${1:BCC V31}",
			  "//-- Initial Creation Date: ${2:7/31/2018}",
			  "//-- Author: BobCAD-CAM",
			  "//-- Machine: ${3:BC_3x_Mill}",
			  "//---------------------------------------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//-- REVISION LOG -----------------------------------------------------",
			  "//--",
			  "//--",
			  "//---------------------------------------------------------------------",
			  "//---------------------------------------------------------------------",
			  "//-- SPECIAL NOTES ABOUT THIS POST AND MACHINE ------------------------",
			  "//---------------------------------------------------------------------",
			  "//--",
			  "//--",
			  "//---------------------------------------------------------------------"
			],
			"description": "Post Processor Format: This snippet inserts a standard header comment at the top of the file for a BobCAD-CAM post processor."
		  },
		  "lua post blocks (BobCAD)": {
			"scope": "bcpst",
			"prefix": "lua (post blocks)",
			"body": [
				"2701. Lua Block 1.",
				"\t$1",
				"",
				"2702. Lua Block 2.",
				"\t",
				"",
				"2703. Lua Block 3.",
				"\t",
				""
			],
			"description": "Post Procoessor Format: You can create lua block numbers from 2701 - 2799. Use the lua programming language to create logic along with BobCAD Lua APIs. See BobCAD Lua Help System for more info."
		},
		"vbscript post blocks (BobCAD)": {
			"scope": "bcpst",
			"prefix": "vbscript (post blocks)",
			"body": [
				"2001. Program Block 1.",
				"\t$1",
				"",
				"2002. Program Block 2.",
				"\t",
				"",
				"2003. Program Block 3.",
				"\t",
				""
			],
			"description": "Post Procoessor Format: You can create vbscript block numbers from 2001 - 2099. Use the vbscript programming language to create logic along with BobCAD APIs. See the Post Processor help system for more info."
		},
		"Coolant Codes (BobCAD)": {
			"scope": "bcpst",
			"prefix": "coolant code (post blocks)",
			"body": [
				"840. Coolant 1 ON code? \"${1:M08}\"",
				"841. Coolant 2 ON code? \"${3:M07}\"",
				"842. Coolant 3 ON code? \"M83\"",
				"843. Coolant 4 ON code? \"M88\"",
				"844. Coolant 5 ON code? \"M31\"",
				"845. Coolant 6 ON code? \"\"",
				"846. Coolant 7 ON code? \"\"",
				"847. Coolant 8 ON code? \"\"",
				"848. Coolant 9 ON code? \"\"",
				"849. Coolant 10 ON code? \"\"",
				"",
				"850. Coolant 1 OFF code? \"${2:M09}\"",
				"851. Coolant 2 OFF code? \"${4:M84}\"",
				"852. Coolant 3 OFF code? \"M89\"",
				"853. Coolant 4 OFF code? \"M33\"",
				"854. Coolant 5 OFF code? \"\"",
				"855. Coolant 6 OFF code? \"\"",
				"856. Coolant 7 OFF code? \"\"",
				"857. Coolant 8 OFF code? \"\"",
				"858. Coolant 9 OFF code? \"\"",
				"859. Coolant 10 OFF code? \"\""
			],
			"description": "Post Processor Format: You can create coolant block numbers from 840 - 859. Use the coolant codes to output coolant on and off codes. Enable these coolant codes in Current Settings > \"Use customized coolant options\""
		},
		"End of Operation (BobCAD)": {
			"scope": "bcpst",
			"prefix": "end of operation (post blocks)",
			"body": [
				"197. End of operation - Toolchange",
				"\tn,coolant_off",
				"\tn,spindle_off",
				"\tn,optional_stop",
				"\tMDI_AfterOperation",
				"",
				"198. End of operation - No Toolchange",
				"\tMDI_AfterOperation",
				"",
				"199. End of last operation",
				"\tMDI_AfterOperation"
			],
			"description": "Post Processor Format: You can create end of operation block numbers from 197 - 199. Use these blocks to output end of operation commands."
		},
		"Probe Blocks 4000 - 4700 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "probe 0 ALL config (post blocks)",
			"body": [
				"//****************************",
				"//* PROBE MEASUREMENT BLOCKS *",
				"//****************************",
				"",
				"4000. Probe on",
				"\tn,macro_call,probe_on,probe_print_open",
				"",
				"4001. Probe off",
				"\tn,macro_call,probe_off,probe_print_close",
				"",
				"4002. End of probe cycle",
				"\tprobe_raw_text",
				"\tn,\"(END OF PROBE CYCLE)\"",
				"",
				"4003. Protected move",
				"\tn,macro_call,probe_protected,x_pos,y_pos,z_pos,feed_rate",
				"",
				"4004. X Single Surface",
				"\tn,macro_call,probe_x_single,x_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4005. Y Single Surface",
				"\tn,macro_call,probe_y_single,y_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4006. Z Single Surface",
				"\tn,macro_call,probe_z_single,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4007. Web",
				"\tn,macro_call,probe_web,x_pos,y_pos,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4008. Pocket",
				"\tn,macro_call,probe_pocket,x_pos,y_pos,z_pos,probe_experience,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4009. Boss (4 point)",
				"\tn,macro_call,probe_boss_4,probe_b_dia,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4010. Bore (4 point)",
				"\tn,macro_call,probe_bore_4,probe_b_dia,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4011. Boss (3 point)",
				"\tn,macro_call,probe_boss_3,probe_b_dia,probe_angle1,probe_angle2,probe_angle3,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol",
				"",
				"4012. Bore (3 point)",
				"\tn,macro_call,probe_bore_3,probe_b_dia,probe_angle1,probe_angle2,probe_angle3,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol",
				"",
				"4013. Internal Corner",
				"\tn,macro_call,probe_int_corner,x_pos,y_pos,z_pos,probe_angle_tol,probe_x_dist,probe_y_dist,probe_x_dist2,probe_y_dist2,probe_true_tol,probe_overtravel,probe_work_offset,probe_upper_tol,probe_null_band, probe_print",
				"",
				"4014. External Corner",
				"\tn,macro_call,probe_ext_corner,x_pos,y_pos,z_pos,probe_angle_tol,probe_x_dist,probe_y_dist,probe_x_dist2,probe_y_dist2,probe_true_tol,probe_overtravel,probe_work_offset,probe_upper_tol,probe_null_band, probe_print",
				"",
				"4015. 5-point Rectangle external",
				"\tn,macro_call,probe_ext_5rect,x_length,y_length,z_pos,5rect_face,probe_angle_tol,5rect_p2_p4_pos,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,5rect_dist,probe_upper_tol,5rect_p1_p3_pos,probe_print",
				"",
				"4016. 5-point Rectangle internal",
				"\tn,macro_call,probe_int_5rect,x_length,y_length,z_pos,5rect_face,probe_angle_tol,5rect_p2_p4_pos,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,5rect_dist,probe_upper_tol,5rect_p1_p3_pos,probe_print",
				"",
				"4017. Angled Surface in XY Plane",
				"\tn,macro_call,probe_line,probe_angle,probe_dist,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4018. Angled Surface in XYZ Plane",
				"\tn,macro_call,probe_surface,x_pos,y_pos,z_pos,probe_surf_output,probe_feature_tol,probe_true_tol,probe_overtravel,probe_print",
				"",
				"4019. Angled web",
				"\tn,macro_call,probe_angled_web,probe_angle,probe_dist,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4020. Angled pocket",
				"\tn,macro_call,probe_angled_pocket,probe_angle,probe_dist,z_pos,probe_experience,probe_feedback,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_work_offset,probe_tool_offset,probe_upper_tol,probe_null_band,probe_print",
				"",
				"4021. 4th Axis Measurement (A Axis)",
				"\tn,macro_call,probe_4th_axis,y_dist,z_pos,probe_rotary,probe_overtravel,probe_angle_tol,probe_work_offset,probe_print",
				"",
				"4022. 4th Axis Measurement (B Axis)",
				"\tn,macro_call,probe_4th_axis,x_dist,z_pos,probe_rotary,probe_overtravel,probe_angle_tol,probe_work_offset,probe_print",
				"",
				"4023. 4th Axis Measurement (C Axis)",
				"\tn,macro_call,probe_4th_axis,x_dist,y_pos,probe_rotary,probe_overtravel,probe_angle_tol,probe_work_offset,probe_print",
				"",
				"4024. 4th Axis Measurement (C2 Axis)",
				"\tn,macro_call,probe_4th_axis,x_pos,y_dist,probe_rotary,probe_overtravel,probe_angle_tol,probe_work_offset,probe_print",
				"",
				"4025. Boss on PCD",
				"\tn,macro_call,probe_boss_pcd,probe_pcd,probe_b_dia,z_pos,probe_angle,probe_num_features,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_print",
				"",
				"4026. Bore on PCD",
				"\tn,macro_call,probe_bore_pcd,probe_pcd,probe_b_dia,z_pos_k,probe_angle,probe_num_features,probe_feature_tol,probe_true_tol,probe_overtravel,probe_inc_distance,probe_print",
				"",
				"4027. Stock Allowance",
				"",
				"4028. Feature to Feature XY Plane",
				"",
				"4029. Feature to Feature Z Plane",
				"",
				"4030. SPC Tool Offset",
				"",
				"4031. Angle Measure in X",
				"\tn,macro_call,probe_angled_surf,x_pos,probe_dist,probe_angle,z_pos,probe_angle_tol,probe_overtravel,probe_print",
				"",
				"4032. Angle Measure in Y",
				"\tn,macro_call,probe_angled_surf,y_pos,probe_dist,probe_angle,z_pos,probe_angle_tol,probe_overtravel,probe_print",
				"",
				"//*******************************",
				"//* CONTACT TOOL SETTER BLOCKS  *",
				"//*******************************",
				"",
				"4100. CTS Automatic Length",
				"\tn,macro_call,probe_cts_auto_length,probe_cts_tool_type,probe_cts_tool_diameter,probe_cts_tool_tol,probe_cts_length_exper,probe_cts_broken,probe_cts_overtravel,probe_cts_tool_offset,probe_cts_tool_length",
				"",
				"4101. CTS Automatic Diameter",
				"\tn,macro_call,probe_cts_auto_diameter,probe_cts_tool_type,probe_cts_tool_diameter,probe_cts_offset_typeA,probe_cts_tool_tol,probe_cts_diam_exper,probe_cts_broken,probe_cts_overtravel,probe_cts_tool_offset,probe_cts_z_clearance,probe_cts_tool_length,probe_cts_z_measure",
				"",
				"4102. CTS Automatic Length and Diameter",
				"\tn,macro_call,probe_cts_auto_length_diam,probe_cts_tool_type,probe_cts_tool_diameter,probe_cts_offset_typeA,probe_cts_tool_tol,probe_cts_diam_exper,probe_cts_length_exper,probe_cts_broken,probe_cts_overtravel,probe_cts_tool_offset,probe_cts_z_clearance,probe_cts_tool_length,probe_cts_z_measure",
				"",
				"4103. CTS Automatic Length Feed Up",
				"\tn,macro_call,probe_cts_auto_length_up,probe_cts_tool_type,probe_cts_tool_diameter,probe_cts_tool_tol,probe_cts_length_exper,probe_cts_broken,probe_cts_overtravel,probe_cts_tool_offset,probe_cts_inc_radial,probe_cts_tool_length",
				"",
				"4104. CTS Broken Tool",
				"\tn,macro_call,probe_cts_broken_tool,probe_cts_tool_diameter,probe_cts_tool_tol,probe_cts_broken,probe_cts_tool_offset,probe_cts_rapid_pos,probe_cts_clearance",
				"",
				"4105. CTS Manual Length",
				"\tn,macro_call,probe_cts_manual_length,probe_cts_tool_diameter,probe_cts_tool_offset,probe_cts_overtravel,probe_cts_z_measure,probe_cts_broken,probe_cts_tool_tol",
				"",
				"4106. CTS Manual Diameter",
				"\tn,macro_call,probe_cts_manual_diam,probe_cts_tool_diameter,probe_cts_offset_typeA,probe_cts_tool_offset,probe_cts_z_measure,probe_cts_overtravel,probe_cts_broken",
				"",
				"4107. CTS Thermal Compensation",
				"\tn,macro_call,probe_cts_thermal_comp,probe_cts_thermal_type,probe_cts_tool_diameter,probe_cts_thermal_x_storage,probe_cts_thermal_y_storage,probe_cts_thermal_z_storage,probe_cts_tool_tol,probe_cts_broken,probe_cts_tool_offset,probe_cts_thermal_measure",
				"",
				"//***********************************",
				"//* NON CONTACT TOOL SETTER BLOCKS  *",
				"//***********************************",
				"",
				"4150. NTS Tool Length",
				"\tn,macro_call,probe_nts_length,probe_nts_solid_tool,probe_nts_tool_type,probe_nts_tool_tol,probe_nts_length_exper,probe_nts_broken,probe_nts_overtravel,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_cutter_edge,probe_nts_stepover",
				"",
				"4151. NTS Tool Diameter",
				"\tn,macro_call,probe_nts_diameter,probe_nts_tool_type,probe_nts_diam_offset,probe_nts_diam_tol,probe_nts_step_dist,probe_nts_diam_exper,probe_nts_broken,probe_nts_overtravel,probe_nts_tool_diameter,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_search_dist,probe_nts_measure_z",
				"",
				"4152. NTS Tool Length and Diameter",
				"\tn,macro_call,probe_nts_length_diam,probe_nts_tool_type,probe_nts_diam_offset,probe_nts_diam_tol,probe_nts_step_dist,probe_nts_tool_tol,probe_nts_diam_exper,probe_nts_length_exper,probe_nts_broken,probe_nts_overtravel,probe_nts_tool_diameter,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_cutter_edge,probe_nts_stepover,probe_nts_search_dist,probe_nts_measure_z",
				"",
				"4153. NTS Cutting Edge Checking",
				"\tn,macro_call,probe_nts_cutting_edge,probe_nts_tool_type,probe_nts_num_edges,probe_nts_runout_tol,probe_nts_broken,probe_nts_overtravel,probe_nts_tool_diameter,probe_nts_spindle_speed,probe_nts_measure_z,probe_nts_search_dist,probe_nts_feed_rev,probe_nts_tool_offset",
				"",
				"4154. NTS Broken Tool - Plunge",
				"\tn,macro_call,probe_nts_broken_plunge,probe_nts_tool_tol,probe_nts_broken,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_stepover,probe_nts_safety_z,probe_nts_solid_tool",
				"",
				"4155. NTS Broken Tool - Solid Tool",
				"\tn,macro_call,probe_nts_broken_solid,probe_nts_solid_tool,probe_nts_tool_tol,probe_nts_broken,probe_nts_tool_offset,probe_nts_safety_z",
				"",
				"4156. NTS Radius Profile Checking",
				"\tn,macro_call,probe_nts_radius_check,probe_nts_tool_type,probe_nts_profile_rad,probe_nts_num_edges,probe_nts_feed_rev,probe_nts_check_height,probe_nts_start_angle,probe_nts_runout_tol,probe_nts_broken,probe_nts_end_angle,probe_nts_tool_diameter,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_linear_dist,probe_nts_radial_dist,probe_nts_safety_z",
				"",
				"4157. NTS Linear Profile Checking",
				"\tn,macro_call,probe_nts_linear_check,probe_nts_tool_type,probe_nts_num_edges,probe_nts_feed_rev,probe_nts_check_height,probe_nts_runout_tol,probe_nts_broken,probe_nts_end_angle,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_radial_dist,probe_nts_safety_z",
				"",
				"4158. NTS Thermal Compensation",
				"\tn,macro_call,probe_nts_thermal_full,probe_nts_tool_type,probe_nts_work_offset,probe_nts_tool_diameter,probe_nts_tool_length,probe_nts_overtravel,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_stepover",
				"",
				"4159. NTS Thermal Compensation - Spindle",
				"\tn,macro_call,probe_nts_thermal_spindle,probe_nts_tool_type,probe_nts_work_offset,probe_nts_tool_length,probe_nts_overtravel,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_stepover",
				"",
				"4160. NTS Thermal Compensation - Radial",
				"\tn,macro_call,probe_nts_thermal_radial,probe_nts_tool_type,probe_nts_work_offset,probe_nts_tool_diameter,probe_nts_overtravel,probe_nts_spindle_speed",
				"",
				"4161. NTS Corner radius measurement",
				"\tn,macro_call,probe_nts_corner_measure,probe_nts_tool_type,probe_nts_corner_rad,probe_nts_diam_offset,probe_nts_num_touch,probe_nts_measure_z,probe_nts_diam_exper,probe_nts_broken,probe_nts_overtravel,probe_nts_tool_diameter,probe_nts_spindle_speed,probe_nts_tool_offset,probe_nts_diam_tol,probe_nts_radial_option",
				"",
				"//************************************",
				"//* PROBING CYCLE AND PREFIX STRINGS *",
				"//************************************",
				"",
				"4200. Macro call code (macro_call)? \"G65\"",
				"4201. Probe on command (probe_on)? \"P9832\"",
				"4202. Probe off command (probe_off)? \"P9833\"",
				"4203. Probe protected move cycle (probe_protected)? \"P9810\"",
				"4204. Probe X single surface cycle (probe_x_single)? \"P9811\"",
				"4205. Probe Y single surface cycle (probe_y_single)? \"P9811\"",
				"4206. Probe Z single surface cycle (probe_z_single)? \"P9811\"",
				"4207. Probe Web cycle (probe_web)? \"P9812\"",
				"4208. Probe Pocket cycle (probe_pocket)? \"P9812\"",
				"4209. Probe Boss 4 point cycle (probe_boss_4)? \"P9814\"",
				"4210. Probe Bore 4 point cycle (probe_bore_4)? \"P9814\"",
				"4211. Probe Boss 3 point cycle (probe_boss_3)? \"P9823\"",
				"4212. Probe Bore 3 point cycle (probe_bore_3)? \"P9823\"",
				"4213. Probe internal corner cycle (probe_int_corner)? \"P9815\"",
				"4214. Probe external corner cycle (probe_ext_corner)? \"P9816\"",
				"4215. Probe external 5 point rectangle cycle (probe_ext_5rect)? \"P9817\"",
				"4216. Probe internal 5 point rectangle cycle (probe_int_5rect)? \"P9817\"",
				"4217. Probe line (angle single surface with A D inputs) cycle (probe_line)? \"P9821\"",
				"4218. Probe 3 point plane (angle surface with XYZ inputs) cycle (probe_surface)? \"P9821\"",
				"4219. Probe angled web cycle (probe_angled_web)? \"P9822\"",
				"4220. Probe angled pocket cycle (probe_angled_pocket)? \"P9822\"",
				"4221. Probe 4th axis cycle (probe_4th_axis)? \"P9818\"",
				"4222. Probe 4th axis cycle (Y/B) (probe_4th_axis_2)? \"NOT AVAILABLE\"",
				"4223. Probe boss on PCD cycle (probe_boss_pcd)? \"P9819\"",
				"4224. Probe bore on PCD cycle (probe_bore_pcd)? \"P9819\"",
				"4225. Probe angled surface cycle (probe_angled_surf)? \"P9843\"",
				"4226. Probe stock allowance (undefined)? \"P9820\"",
				"4227. Probe feature-to-feature in XY (undefined)? \"P9834\"",
				"4228. Probe feature-to-feature in Z (undefined)? \"P9834\"",
				"4229. Probe update statistical process control (SPC) (undefined)? \"P9835\"",
				"4230. Probe storing multi-stylus data (undefined)? \"NOT AVAILABLE\"",
				"4231. Probe loading multi-stylus data (undefined)? \"NOT AVAILABLE\"",
				"4232. Probe optimizing probe cycle (undefined)? \"NOT AVAILABLE\"",
				"",
				"4250. Prefix for x position in probing (x_pos)? \"X\"",
				"4251. Prefix for y position in probing (y_pos)? \"Y\"",
				"4252. Prefix for z position in probing (z_pos)? \"Z\"",
				"4253. Prefix for bore and boss diameter parameter (probe_b_dia)? \"D\"",
				"4254. Prefix for probe angle parameter (probe_angle)? \"A\"",
				"4255. Prefix for probe bore/boss first angle parameter (probe_angle1)? \"A\"",
				"4256. Prefix for probe bore/boss second angle parameter (probe_angle2)? \"B\"",
				"4257. Prefix for probe bore/boss third angle parameter (probe_angle3)? \"C\"",
				"4258. Prefix for probe distance parameter  (probe_dist)? \"D\"",
				"4259. Prefix for X distance parameter in corner probing (probe_x_dist)? \"D\"",
				"4260. Prefix for Y distance parameter in corner probing (probe_y_dist)? \"E\"",
				"4261. Prefix for second X distance parameter in corner probing (probe_x_dist2)? \"I\"",
				"4262. Prefix for second Y distance parameter in corner probing (probe_y_dist2)? \"J\"",
				"4263. Prefix for X distance parameter used in 4th axis probing (x_dist)? \"X\"",
				"4264. Prefix for Y distance parameter used in 4th axis probing (y_dist)? \"Y\"",
				"4265. Prefix for X length parameter used in rectangle probing (x_length)? \"D\"",
				"4266. Prefix for y length parameter used in rectangle probing (y_length)? \"E\"",
				"4267. Prefix for z measure position parameter in Bore PCD (z_pos_k)? \"K\"",
				"4268. Prefix for face for 2 measurements parameter in rectangle probing (5rect_face)? \"A\"",
				"4269. Prefix for P2 and P4 measure position parameter in rectangle probing (5rect_p2_p4_pos)? \"H\"",
				"4270. Prefix for distance between 2 points in rectangle probing (5rect_dist)? \"T\"",
				"4271. Prefix for second distance parameter in rectangle probing (5rect_p1_p3_pos)? \"V\"",
				"4272. Prefix for probe surface output parameter (probe_surf_output)? \"C\"",
				"4273. Prefix for 4th axis probing type parameter (probe_rotary)? \"K\"",
				"4274. Prefix for the pitch circle diameter parameter in Boss/Bore PCD (probe_pcd)? \"C\"",
				"4275. Prefix for the number of features parameter in Boss/Bore PCD (probe_num_features)? \"B\"",
				"4276. Prefix for the angle tolerance parameter in probing (probe_angle_tol)? \"B\"",
				"4277. Prefix for the experience value parameter in probing (probe_experience)? \"E\"",
				"4278. Prefix for the feedback parameter in probing (probe_feedback)? \"F\"",
				"4279. Prefix for the feature tolerance value in probing (probe_feature_tol)? \"H\"",
				"4280. Prefix for the true tolerance value in probing (probe_true_tol)? \"M\"",
				"4281. Prefix for the overtravel parameter in probing (probe_overtravel)? \"Q\"",
				"4282. Prefix for the incremental distance parameter in probing (probe_inc_distance)? \"R\"",
				"4283. Prefix for the work offset parameter in probing (probe_work_offset)? \"S\"",
				"4284. Prefix for the tool offset parameter in probing (probe_tool_offset)? \"T\"",
				"4285. Prefix for the upper tolerance limit parameter in probing (probe_upper_tol)? \"U\"",
				"4286. Prefix for the null band parameter in probing (probe_null_band)? \"V\"",
				"4287. Prefix for the print parameter in probing (probe_print)? \"W\"",
				"4288. Command for opening the print port (probe_print_open)? \"W1.\"",
				"4289. Command for closing the print port (probe_print_close)? \"W1.\"",
				"",
				"//***********************************************",
				"//* NON-CONTACT TOOL SETTER CYCLES AND PREFIXES *",
				"//***********************************************",
				"",
				"4500. Non-contact tool setter tool length cycle (probe_nts_length)? \"P9862\"",
				"4501. Non-contact tool setter tool diameter cycle (probe_nts_diameter)? \"P9862\"",
				"4502. Non-contact tool setter tool length and diameter (probe_nts_length_diam)? \"P9862\"",
				"4503. Non-contact tool setter cutting edge checking (probe_nts_cutting_edge)? \"P9862\"",
				"4504. Non-contact tool setter broken tool - plunge (probe_nts_broken_plunge)? \"P9863\"",
				"4505. Non-contact tool setter broken tool - solid tool (probe_nts_broken_solid)? \"P9866\"",
				"4506. Non-contact tool setter radius profile checking (probe_nts_radius_check)? \"P9865\"",
				"4507. Non-contact tool setter linear profile checking (probe_nts_linear_check)? \"P9865\"",
				"4508. Non-contact tool setter full thermal compensation (probe_nts_thermal_full)? \"P9861\"",
				"4509. Non-contact tool setter spindle thermal compensation (probe_nts_thermal_spindle)? \"P9861\"",
				"4510. Non-contact tool setter radial thermal compensation (probe_nts_thermal_radial)? \"P9861\"",
				"4511. Non-contact tool setter corner radius measure cycle (probe_nts_corner_measure)? \"P9867\"",
				"",
				"",
				"4550. Prefix for NTS measurement type parameter (probe_nts_tool_type)? \"B\"",
				"4551. Prefix for NTS tool length tolerance value parameter (probe_nts_tool_tol)? \"H\"",
				"4552. Prefix for NTS length experience parameter (probe_nts_length_exper)? \"J\"",
				"4553. Prefix for NTS tool out of the tolerance parameter (probe_nts_broken)? \"M\"",
				"4554. Prefix for NTS overtravel parameter (probe_nts_overtravel)? \"Q\"",
				"4555. Prefix for NTS spindle speed parameter (probe_nts_spindle_speed)? \"S\"",
				"4556. Prefix for NTS tool offset parameter (probe_nts_tool_offset)? \"T\"",
				"4557. Prefix for NTS radial step-over parameter (probe_nts_stepover)? \"Y\"",
				"4558. Prefix for NTS solid tool parameter (probe_nts_solid_tool)? \"A\"",
				"4559. Prefix for NTS cutter edge parameter (probe_nts_cutter_edge)? \"W\"",
				"4560. Prefix for NTS diameter offset number parameter (probe_nts_diam_offset)? \"D\"",
				"4561. Prefix for NTS diameter tolerance parameter (probe_nts_diam_tol)? \"E\"",
				"4562. Prefix for NTS step distance for radial measure parameter (probe_nts_step_dist)? \"F\"",
				"4563. Prefix for NTS radius/diameter experience parameter (probe_nts_diam_exper)? \"I\"",
				"4564. Prefix for NTS tool diameter parameter (probe_nts_tool_diameter)? \"R\"",
				"4565. Prefix for NTS search distance for high spot parameter (probe_nts_search_dist)? \"X\"",
				"4566. Prefix for NTS measure height parameter (probe_nts_measure_z)? \"Z\"",
				"4567. Prefix for NTS number of cutting edges parameter (probe_nts_num_edges)? \"C\"",
				"4568. Prefix for NTS feed per rev parameter (probe_nts_feed_rev)? \"F\"",
				"4569. Prefix for NTS run-out tolerance parameter (probe_nts_runout_tol)? \"K\"",
				"4570. Prefix for NTS safety plane parameter (probe_nts_safety_z)? \"Z\"",
				"4571. Prefix for NTS start angle for profile checking parameter (probe_nts_start_angle)? \"J\"",
				"4572. Prefix for NTS end angle for profile checking parameter (probe_nts_end_angle)? \"Q\"",
				"4573. Prefix for NTS profile checking height parameter (probe_nts_check_height)? \"H\"",
				"4574. Prefix for NTS profile checking linear distance parameter (probe_nts_linear_dist)? \"X\"",
				"4575. Prefix for NTS profile checking radial distance parameter (probe_nts_radial_dist)? \"Y\"",
				"4576. Prefix for NTS work offset in thermal checking parameter (probe_nts_work_offset)? \"C\"",
				"4577. Prefix for NTS tool length in thermal checking parameter (probe_nts_tool_length)? \"K\"",
				"4578. Prefix for NTS corner radius parameter (probe_nts_corner_rad)? \"C\"",
				"4579. Prefix for NTS corner measure number of touches parameter (probe_nts_num_touch)? \"F\"",
				"4580. Prefix for NTS corner measure radial measure option parameter (probe_nts_radial_option)? \"V\"",
				"4581. Prefix for NTS profile radius parameter (probe_nts_profile_rad)? \"R\"",
				"",
				"//********************************************",
				"//* POST QUESTIONS RELATED TO PROBING OUTPUT *",
				"//********************************************",
				"",
				"4700. Angle output mode for probing (0= -180/+180; 1= 0-360; 2= any)? 0",
				""
			],
			"description": "Post Processor Format: Use prefix code snippet \"probe 0 - probe 3\" to place all probing blocks in a post processor. This code snippet contains all probing configuration blocks 4000 - 4700."
		},
		"Start Of Probe 3997 & 4997 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "probe 1 start of (post blocks)",
			"body": [
				"3997. Start of file with probe",
				"\tn,rapid_move_forced, work_plane, force_cancel_offset,\"G49\",work_coord,cancel_drill_cycle,measure_mode,absolute_coord",
				"\t\" \"",
				"\t\"(FIRST OP - FIRST PROBE)\"",
				"\tsystem_comment",
				"\tfeature_name_comment",
				"\t\" \"",
				"\t\"(TOOL #\",list_tool_number,\" \",tool_diameter,\" \",tool_label,\")\"",
				"\tn,t,\"M06\"",
				"\tn,work_coord",
				"\toutput_primary_rotary_index",
				"\toutput_secondary_rotary_index",
				"\tn,rapid_move,absolute_coord,xr,yr,p_rot,s_rot",
				"\tn,rapid_move,length_offset,zr",
				" \t",
				"4997. Start of file with tool setter",
				"\tn,rapid_move_forced, work_plane, force_cancel_offset,\"G49\",work_coord,cancel_drill_cycle,measure_mode,absolute_coord",
				"\t\" \"",
				"\t\"(TOOL SETTER - FIRST TOOL)\"",
				"\tsystem_comment",
				"\tfeature_name_comment",
				"\t\" \"",
				"\t\"(TOOL #\",list_tool_number,\" \",tool_diameter,\" \",tool_label,\")\"",
				"\tn,t,\"M06\"",
				"\tn,work_coord",
				" \t",
			],
			"description": "Post Processor Format: Use prefix code snippet \"probe 0 - probe 3\" to place all probing blocks in a post processor. You can create a start of file with probe and tool setter from 3997 and 4997. Use this to output the start of file with probe and tool setter commands."
		},
		"Tool Change Probe 3998 & 4998 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "probe 2 tool change (post blocks)",
			"body": [
				"3998. Probe tool change",
				"\tn,absolute_coord",
				"\tn,optional_stop",
				"\t\" \"",
				"\t\"(NEXT OP - NEXT PROBING TOOL)\"",
				"\tsystem_comment",
				"\tfeature_name_comment",
				"\t\" \"",
				"\t\"(TOOL #\",list_tool_number,tool_diameter,tool_label,\")\"",
				"\tn,t,\"M06\"",
				"\tn,work_coord",
				"\tn,work_plane",
				"\toutput_primary_rotary_index",
				"\toutput_secondary_rotary_index",
				"\tn,initialize_gcode,force_x,force_y,rapid_move,absolute_coord,xr,yr,p_rot,s_rot",
				"\tn,rapid_move,length_offset,zr",
				" ",
				"4998. Probe tool setter tool change",
				"\tn,absolute_coord",
				"\tn,optional_stop",
				"\t\" \"",
				"\t\"(NEXT OP - NEXT TOOL)\"",
				"\tsystem_comment",
				"\tfeature_name_comment",
				"\t\" \"",
				"\t\"(TOOL #\",list_tool_number,tool_diameter,tool_label,\")\"",
				"\tn,t,\"M06\"",
				"\tn,work_coord",
				"\tn,work_plane",
				" "
			],
			"description": "Post Processor Format: Use prefix code snippet \"probe 0 - probe 3\" to place all probing blocks in a post processor. You can create a probe tool change and probe tool setter tool change from 3998 and 4998. Use this to output the probe tool change and probe tool setter tool change commands."
		},
		"Null Tool Change Probe 3999 & 4999 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "probe 3 null tool change (post blocks)",
			"body": [
				"3999. Probe null tool change",
				"\t\" \"",
				"\t\"(NEXT OP - SAME PROBE)\"",
				"\tsystem_comment",
				"\tfeature_name_comment",
				"\t\" \"",
				"\tn,work_coord",
				"\tn,work_plane",
				"\toutput_primary_rotary_index",
				"\toutput_secondary_rotary_index",
				"\tn,initialize_gcode,force_x,force_y,rapid_move,xr,yr,p_rot,s_rot",
				"\tn,rapid_move,zr",
				" ",
				"4999. Tool Setter null tool change",
				"\t\" \"",
				"\t\"(NEXT OP - SAME TOOL)\"",
				"\tsystem_comment",
				"\tfeature_name_comment",
				"\t\" \"",
				"\tn,work_coord",
				"\tn,work_plane",
				" "
			],
			"description": "Post Processor Format: Use prefix code snippet \"probe 0 - probe 3\" to place all probing blocks in a post processor. You can create a probe null tool change and tool setter null tool change from 3999 and 4999. Use this to output the probe null tool change and tool setter null tool change commands."
		},
		"Zone 3 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "zone 3 (post blocks)",
			"body": [
				"// Zone 3",
				"6050. Zone 3 (T1 - W3) - Shift - First Linear Axis? 0.000",
				"6051. Zone 3 (T1 - W3) - Shift - Second Linear Axis? 0.000",
				"6052. Zone 3 (T1 - W3) - Shift - Third Linear Axis ? 0.000",
				"6053. Zone 3 (T1 - W3) - Shift - First Rotary Axis? 0.000",
				"6054. Zone 3 (T1 - W3) - Shift - Second Rotary Axis? 0.000",
				"6055. Zone 3 (T1 - W3) - Scale - First Linear Axis? 1.0",
				"6056. Zone 3 (T1 - W3) - Scale - Second Linear Axis? 1.0",
				"6057. Zone 3 (T1 - W3) - Scale - Third Linear Axis ? 1.0",
				"6058. Zone 3 (T1 - W3) - Scale - First Rotary Axis? 1.0",
				"6059. Zone 3 (T1 - W3) - Scale - Second Rotary Axis? 1.0",
				"6060. Zone 3 (T1 - W3) - Prefix for Polar Interpolation C/Y Axis? \"C=\"",
				"6061. Zone 3 (T1 - W3) - Enable Code? \" (ZONE 3 ENABLE CODE)\"",
				"6062. Zone 3 (T1 - W3) - Disable Code? \" (ZONE 3 DISABLE CODE)\"",
				"6063. Zone 3 Arc Definition? 0",
				"6070. Zone 3 Command Block 1",
				"6071. Zone 3 Command Block 2",
				"6072. Zone 3 Command Block 3",
				"6073. Zone 3 Command Block 4",
				"6074. Zone 3 Command Block 5",
				" "
			],
			"description": "Post Processor Format: Zone blocks are used for Mill-Turn posts. Zone Blocks that are used to set output options based on combinations of machine axis components being used together. An example of this would be using the Left Chuck/Spindle with the Upper turret. "
		},
		"custom MDI 1 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "MDI Custom Commands (optional_stop)",
			"body": [
				"26${1:00}. ${2:Optional Stop}",
				"\t${3:optional_stop}"
			],
			"description": "Custom MDI Commands: Create a new post block called 2600. Optional Stop. Then, place optional_stop underneath it. In the softwware, on the \"MDI\" page of a feature, expand \"Custom Commands\" and you will now see a new command called, \"Optional Stop\"."
		},
		"MDI generic (BobCAD)": {
			"scope": "bcpst",
			"prefix": "MDI Custom Command (generic)",
			"body": [
				"26${1:00}. ${2:Name of Custom Command}",
				"\t${3:post_variables_here}",
				"\tn,${4:more_post_variables_here}"
			],
			"description": "Custom MDI Commands: This is a basic setup of a custom MDI command in a post processor. Custom MDIs are setup in post blocks 2600. - 2699. In the softwware, on the \"MDI\" page of a feature, expand \"Custom Commands\" and you will now see a new command called, \"Name of Custom Command\"."
		},
		"mdi_custom_int (BobCAD)": {
			"scope": "bcpst",
			"prefix": "mdi_custom_int",
			"body": [
				"mdi_custom_int_${1:customVariableName}"
			],
			"description": "Custom MDI Commands: mdi_custom_int allows you to define a custom integer number when on the \"MDI\" page in the software. Custom MDIs are setup in post blocks 2600. - 2699. In the softwware, on the \"MDI\" page of a feature, expand \"Custom Commands\" and you will now see a new command called, \"Name of Custom Command\"."
		},
		"mdi_custom_double (BobCAD)": {
			"scope": "bcpst",
			"prefix": "mdi_custom_double",
			"body": [
				"mdi_custom_double_${1:customVariableName}"
			],
			"description": "Custom MDI Commands: mdi_custom_double allows you to define a custom decimal (double) number when on the \"MDI\" page in the software. Custom MDIs are setup in post blocks 2600. - 2699. In the softwware, on the \"MDI\" page of a feature, expand \"Custom Commands\" and you will now see a new command called, \"Name of Custom Command\"."
		},
		"mdi_custom_string (BobCAD)": {
			"scope": "bcpst",
			"prefix": "mdi_custom_string",
			"body": [
				"mdi_custom_string_${1:customVariableName}"
			],
			"description": "Custom MDI Commands: mdi_custom_string allows you to define a custom text (string) when on the \"MDI\" page in the software. Custom MDIs are setup in post blocks 2600. - 2699. In the softwware, on the \"MDI\" page of a feature, expand \"Custom Commands\" and you will now see a new command called, \"Name of Custom Command\"."
		},
		// Formatting Post Variable Output
		"Format 1 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (leading trailing)",
			"body": [
				"'[${1:assignLeadingDigits}.${2:assignTrailingDigits}L]' ${3:postVariableName}"
			],
			"description": "Post Variable Format: Allows you to format the leading and trailing digits on both sides of the deciaml of a post variable. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 2 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (leading)",
			"body": [
				"'[${1:assignLeadingDigits}.L]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Allows you to assign the leading digits keeping the trailing digits untouched of a post variable. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 3 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (leading) (no trailing)",
			"body": [
				"'[${1:assignLeadingDigits}L]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Commonly used if you need to output a whole number (integer) of a post variable. This format will round up or down. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 4 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (trailing)",
			"body": [
				"'[.${1:assignTrailingDigits}T]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Allows you to to assign the trailing digits and leave the leading digits untouched of a post variable. The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		"Format 5 (BobCAD)": {
			"scope": "bcpst",
			"prefix": "format post var (trailing) (multiplier)",
			"body": [
				"'[${1:assignTrailing}T]' ${2:postVariableName}"
			],
			"description": "Post Variable Format: Commonly used as a multiplier by factors of 10 (1T: x10, 2T: x100,3T: x1,000, etc..) of a post variable. for example, take the number 9.5118. If you assign the trailing digits to 3 (eg. '[3T]'), this will move the decimal 3 places to the right, round and remove the decimal. Output = 9512  The output format of posting variables can be controlled using a special formatting string (or format specifier). The format specifier controls the number of leading and/or trailing digits to use and whether or not a decimal point is used. The format specifier is placed before the variable in the post processor. The capital letter, L, must be used to specify the first value as the leading digits used (or if using only a single number in the string). The letter is always placed at the end of the formatting string. The capital letter, T, is used to when specifying (only) the trailing digits used."
		},
		// BobCAD API Specific Lua Snippets (Post Processors)
		"Output Text (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.OutputText",
			"body": [
				"BcPost.OutputText(\"${1:HERE IS SOME TEXT IN YOUR NC PROGRAM}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to output a string of text inside the NC program. Parameters: text – string value of the text to output in the NC program"
		},
		"ProcessPostLine (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.ProcessPostLine",
			"body": [
				"BcPost.ProcessPostLine(\"${1:n,rapid_move_forced, 'X\"..xValLuaVar..\"','Y\"..yValLuaVar..\"'}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. (Example: “n, rapid_move, xr, yr, ‘M08’”). The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file.  Parameters: postString – string value of the text to output in the NC program."
		},
		"Run Post Line (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunPostLine",
			"body": [
				"BcPost.RunPostLine(\"${1:n, rapid_move, xr, yr, 'M08'}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file. A newline character will be added to the end of the output code.  Parameters: postString – string value of the text to output in the NC program."
		},
		"Run Block (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunBlock",
			"body": [
				"-- Call block $1. ${2:Cutter compensation left to output cutter comp on}",
				"BcPost.RunBlock(${1:12})"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. (Example: “n, rapid_move, xr, yr, ‘M08’”). The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file.  Parameters: blockNum – integer value of the posting block that should be called."
		},
		"Run Post Vars (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunPostVariables",
			"body": [
				"BcPost.RunPostVariables(\"${1:xr, yr}\")"
			],
			"description": "BobCAD Post Lua API: This function is utilized to process a line of standard BobCAD posting variables.  Input must be a string formatted exactly as a posting line using system posting variables. The system post processes these variables as it would by using the posting engine and outputs the posted string to the posted NC file.   Parameters: postString – string value of the text to output in the NC program."
		},
		"RunVBScript Ex (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBScript EXAMPLE",
			"body": [
				"-- This small example shows the need for the \\n newline characters and how to return a value",
				"${1:test} = BcPost.RunVBScript(\"${2:a=17 \\n b=12 \\n c=a+b \\n CALL MILL_SetReturnString(c)}\")",
				"Bcc.ShowMessageBox($1, {Title = \"${3:Lua calling VB}\"})"
			],
			"description": "BobCAD Post Lua API: This function allows you to pass VB scripting code via the Lua engine.  Because our posting engine has always had the VB Scripting for applications engine in it for many years, we implemented this call just in case any existing code would want to be reused. IMPORTANT:  The syntax handling for this is important, as it is actually Lua parsing by passing a string and then VB all from our C++ code base, you must be a little stringent on your characters specifically when dealing with quotes and new line characters.  Parameters: code – string containing the VBScript code that should be run.  Return: Will return the output of the VBScript code in a string format when using the MILL_SetReturnString() function that exists in our VB scripting language."
		},
		"Run VBScript (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBScript",
			"body": [
				"BcPost.RunVBScript(\"${1:MsgBox(\\\"Hi from VB Lua\\\")}\")"
			],
			"description": "BobCAD Post Lua API: This function allows you to pass VB scripting code via the Lua engine.  Because our posting engine has always had the VB Scripting for applications engine in it for many years, we implemented this call just in case any existing code would want to be reused. IMPORTANT:  The syntax handling for this is important, as it is actually Lua parsing by passing a string and then VB all from our C++ code base, you must be a little stringent on your characters specifically when dealing with quotes and new line characters.  Parameters: code – string containing the VBScript code that should be run.  Return: Will return the output of the VBScript code in a string format when using the MILL_SetReturnString() function that exists in our VB scripting language."
		},
		"Run VBApi 1 para (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBApi (1 param)",
			"body": [
				"-- Get the string from memory location $2",
				"BcPost.RunVBApi(\"${1:MILL_GetStringMemoryLoc}\", ${2:10})"
			],
			"description": "BobCAD Post Lua API: This function can be utilized for calling an existing VB API call from the posting engine. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete list of the VB APIs. IMPORTANT:  This function exists to fully support all of our VB API functions and will be the primary always working method.  With that being said it is also important to note that any VB API that we created prior to BobCAD-CAM V32 you can also simply just use BcPost.vbAPIname().   Parameters: vbApiName – any existing VB function name as a string that has been implemented to work in the BobCAD posting engine. vbInputParas - the input value to the VB function.  For almost all BobCAD posting API's they all only have a single input parameter.  For the few instances where the VB API requires multiple input parameters (eg. MILL_SetIntMemoryLocation(index, integer)) this parameter should be a table containing the various inputs."
		},
		"Run VBApi 2 para (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.RunVBApi (2 param)",
			"body": [
				"-- Get the string from memory location $2",
				"BcPost.RunVBApi(\"${1:MILL_SetStringMemoryLoc}\", {${2:10},\"${3:Save Me}\"})"
			],
			"description": "BobCAD Post Lua API: This function can be utilized for calling an existing VB API call from the posting engine. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete list of the VB APIs. IMPORTANT:  This function exists to fully support all of our VB API functions and will be the primary always working method.  With that being said it is also important to note that any VB API that we created prior to BobCAD-CAM V32 you can also simply just use BcPost.vbAPIname().   Parameters: vbApiName – any existing VB function name as a string that has been implemented to work in the BobCAD posting engine. vbInputParas - the input value to the VB function.  For almost all BobCAD posting API's they all only have a single input parameter.  For the few instances where the VB API requires multiple input parameters (eg. MILL_SetIntMemoryLocation(index, integer)) this parameter should be a table containing the various inputs."
		},
		"Get Val DataBlock (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfDataBlock",
			"body": [
				"BcPost.GetValueOfDataBlock(${1:blockNumber})"
			],
			"description": "BobCAD Post Lua API: This is function is utilized to get the value defined for a Post Question from the post processor. At the time of this writing we currently know that post questions in blocks 750-999 do not return any value.  This is planned to be addressed.  Parameters: blockNumber – integer value of the block number you wish to retrieve the data from. Return: The value of the requested posting variable which can be various types depending on the block number requested."
		},
		"Set Val DataBlock (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.SetValueOfDataBlock",
			"body": [
				"BcPost.SetValueOfDataBlock(${1:blockNumber}, ${2:value})"
			],
			"description": "BobCAD Post Lua API: This is function is utilized to set the value defined for a Post Question from the post processor. See Lua Help System for info on post questions that cannot be altered during posting as they are utilized during the CL file creation. Parameters: blockNumber – string value of the BobCAD posting variable name. value - the value to assign to the post question. Note: for the boolean post blocks which use y / n as the item in the post processor, you must use true or false in this function."
		},
		"Get Val PostVar (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfPostVariable",
			"body": [
				"${2:luaVarName} = BcPost.GetValueOfPostVariable(${1:postVariable})"
			],
			"description": "BobCAD Post Lua API: This function is utilized get the current value of existing native posting engine variable at the current time this function is called.  This API does not currently support all of the BobCAD posting engine variables, and a list of the supported variables can be found in the BobCAD Lua Help System. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete description of the posting variables and VB APIs. Parmeters: postVariable – string value of the BobCAD posting variable name. Return: The value of the requested posting variable"
		},
		"Set Val PostVar (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfPostVariable",
			"body": [
				"BcPost.SetValueOfPostVariable(${1:postVariable}, ${2:value})"
			],
			"description": "CURRENTLY NOT IMPLEMENTED! BobCAD Post Lua API: This function is utilized set the current value of any existing native posting engine variable at the current time this function is called. Please refer to the Posting Variable and API Reference in the help system of the BobCAD-CAM product you are working with for a complete list of the VB APIs. Parameters: postVariable – string value of the BobCAD posting variable name. value - the value to assign to the posting variable"
		},
		"Get Val Op (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation",
			"body": [
				"BcPost.GetValueOfOperation(${1:paramName})"
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex1 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 1)",
			"body": [
				"-- Get the current operations type value in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"Type\")",
				"Bcc.ShowMessageBox(\"Operation Type: \"..value, {Title=\"Operation Type\"})"		  
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex2 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 2)",
			"body": [
				"-- Get the current operations job name in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"JobName\")",
				"Bcc.ShowMessageBox(\"Job Name: \"..value, {Title=\"Job Name\"})"				
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex3 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 3)",
			"body": [
				"-- Get the current operations feature name in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"FeatureName\")",
				"Bcc.ShowMessageBox(\"Feature Name: \"..value, {Title=\"Feature Name\"})"						  
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		"Get Val Op Ex4 (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "BcPost.GetValueOfOperation (Ex 4)",
			"body": [
				"-- Get the current operations name in the CAM Tree",
				"value = BcPost.GetValueOfOperation(\"OperationName\")",
				"Bcc.ShowMessageBox(\"Operation Name: \"..value, {Title=\"Operation Name\"})"							
			],
			"description": "BobCAD Post Lua API: This function is utilized get operation data such as the names, types, and custom posting information. Parameters: paramName – this function has a fixed set of parameter strings that you can pass to get different information related to the machining operation that is currently posting. See BobCAD Lua Help System to see the list of possible inputs for paramName Return: The value of the requested piece of operation data."
		},
		// BobCAD Lua API Specific Snippets (General)
		"Message Box (basic) (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "Bcc.ShowMessageBox (basic)",
			"body": [
				"Bcc.ShowMessageBox(\"${1:Here is my message}\")"						
			],
			"description": "BobCAD Lua API: Displays a message box to the user. Go to BobCAD Lua API Help System to learn more. (CTRL+SHIFT+P > BobCAD Post Utility: Open Lua API Help System)"
		},
		"Message Box (Ex1) (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "Bcc.ShowMessageBox (Ex 1)",
			"body": [
				"Bcc.ShowMessageBox(\"${1:This went bad}\", {ButtonType=\"${2:OK}\", ImageType=\"${3:Error}\"})"						
			],
			"description": "BobCAD Lua API: Displays a message box to the user. Go to BobCAD Lua API Help System to learn more. (CTRL+SHIFT+P > BobCAD Post Utility: Open Lua API Help System)"
		},
		"Message Box (Ex2) (BobCAD / Lua)": {
			"scope": "bcpst, lua",
			"prefix": "Bcc.ShowMessageBox (Ex 2)",
			"body": [
				"ret = Bcc.ShowMessageBox(\"${1:Error 111}\", {ButtonType=\"${2:YesNoCancel}\", ImageType=\"${3:Exclamation}\", Title = \"${4:Warning}\"})"						
			],
			"description": "BobCAD Lua API: Displays a message box to the user. Go to BobCAD Lua API Help System to learn more. (CTRL+SHIFT+P > BobCAD Post Utility: Open Lua API Help System)"
		},
		"Full Lua Block (BobCAD / Lua)": {
			  "scope": "bcpst, lua",
			  "prefix": "lua block full example",
			  "body": [
				"-- This scripting block is called from the 1021 feed move block in order to check",
				"-- if the cut off is at the final position of the cut off so that a dwell can",
				"-- be output from the Advanced Posting page",
				"",
				"-- Simple rounding function",
				"function round(num, numDecimalPlaces)",
				"  local mult = 10^(numDecimalPlaces or 0)",
				"  return math.floor(num * mult + 0.5) / mult",
				"end",
				"",
				"-- Make sure the current operation is the cut off operation",
				"if (BcPost.GetValueOfOperation(\"Type\") == 1012) then",
				"  -- Get the current operations ID so we can get its parameters",
				"  local opID = BcPost.GetValueOfOperation(\"ID\")",
				"",
				"  -- Get the cut off X value from the operation",
				"  local ret = Bcc.GetCamObjParameters(opID, {{\"Parameters\", \"cutoff_x\"}})",
				"",
				"  -- Round the values to 4 decimal places so I can compare if they are the same",
				"  curX = round(BcPost.GetValueOfPostVariable(\"x_f\"), 4)",
				"  cutX = round(ret.Parameters.cutoff_x, 4)",
				"",
				"  -- Check to see if this feed move is at the final cut off x position",
				"  if (curX == cutX) then",
				"    -- Get the advanced posting page checkbox values in a table",
				"    checkbox = BcPost.GetValueOfOperation(\"UserCheckBoxVariables\")",
				"",
				"    -- Get the double values from the adv posting page",
				"    editValue = BcPost.GetValueOfOperation(\"UserEditRealVariables\")",
				"",
				"    -- Get the state of the dwell checkbox",
				"    if checkbox[2] == 1 then",
				"      -- Output the dwell if the checkbox is selected",
				"      BcPost.ProcessPostLine(\"n,gdwell, 'T'\"..round(editValue[3], 4))",
				"    end",
				"  end",
				"end"
			  ],
			  "description": "BobCAD Lua API: This shows an example of how a lua block in the post processsor is setup. (This should be inside Post Blocks: 2701 - 2799). To call these blocks in the post processor, use lua_block_# (eg. if in block 2701, use lua_block_1 in a normal post block). In this example, you would place lua_block_1 at the bottom of post block 1021. Feed Move in a Lathe Post Proccessor."
			},
			"Hello World (plugin) (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "Hello World BobCAD Plugin",
				"body": [
				  "function ConnectToBCC()",
				  "  -- Add a button the ribbon to fire the Hello World function when pressed",
				  "  Bcc.AddCommand({ TabName=\"My Lua Plug-ins\", GroupName=\"Basic Examples\", ButtonName=\"Hello World\", CallbackFuncName=\"sayHelloWorld\", ImageNameLarge=\"light.png\", ImageNameSmall=\"light.png\", ToolTip=\"Say hello to the world!\" })",
				  "end",
				  "",
				  "function sayHelloWorld()",
				  "  -- Display a message box stating Hello World!",
				  "  Bcc.ShowMessageBox(\"Hello World\")",
				  "end"
				],
				"description": "BobCAD Lua API: This snippet creates a 'Hello World' plugin for BCC. It adds a button to the ribbon that, when pressed, displays a 'Hello World' message box."
			  },
			  "Hello World (post) (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "Hello World (post)",
				"body": [
				  "function sayHelloWorld()",
				  "  -- Display a message box stating Hello World!",
				  "  Bcc.ShowMessageBox(\"Hello World\")",
				  "end",
				  "",
				  "sayHelloWorld()"
				],
				"description": "BobCAD Post Lua API: This is how you can structure a simple 'Hello World' message box in a BobCAD post processor. Places in post blocks 2701 - 2799. To call these blocks in the post processor, use lua_block_# (eg. if in block 2701, use lua_block_1 in a normal post block)."
			  },
			  "ShowOperationData function (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "ShowOperationData",
				"body": [
				  "--[[",
				  "\tShowOperationData function",
				  "\tThis function retrieves the current operations ID value of the Operation in the CAM Tree,",
				  "\titerates through the returned table and displays the key-value pairs in a message box.",
				  "\tUse GetValueFromOperation function to extract the key or subkey you need to use", 
				  "]]",
				  "\tfunction ShowOperationData()",
				  "\t\t-- Get the current operations ID value in the CAM Tree",
				  "\t\top_id = BcPost.GetValueOfOperation(\"ID\")",
				  "",
				  "\t\tBcc.ShowMessageBox(type(op_id) .. \" \" .. op_id) -- Should be a number",
				  "",
				  "\t\tretTable = Bcc.GetCamObjParameters(op_id)",
				  "",
				  "\t\t-- Initialize an empty string to hold the table values",
				  "\t\ttable_values = \"\"",
				  "",
				  "\t\t-- Iterate through the table",
				  "\t\tfor key, value in pairs(retTable) do",
				  "\t\t\t-- Check if value is a table",
				  "\t\t\tif type(value) == \"table\" then",
				  "\t\t\t\t-- If it's a table, iterate through it and add its values to the string",
				  "\t\t\t\tfor k, v in pairs(value) do",
				  "\t\t\t\t\ttable_values = table_values .. \"Key: \" .. key .. \", Subkey: \" .. k .. \", Value: \" .. tostring(v) .. \"\\n\"",
				  "\t\t\t\tend",
				  "\t\t\telse",
				  "\t\t\t\t-- If it's not a table, add it to the string as before",
				  "\t\t\t\ttable_values = table_values .. \"Key: \" .. key .. \", Value: \" .. tostring(value) .. \"\\n\"",
				  "\t\t\tend",
				  "\t\tend",
				  "",
				  "\t\t-- Show the table values in a message box",
				  "\t\tBcc.ShowMessageBox(table_values, {Title=\"ALL Operation Data\"})",
				  "\tend",
				  "",
				  "\tShowOperationData()"
				],
				"description": "BobCAD Post Lua API: This function is utilized to get ALL operation data in a feature such as the names, types, and custom posting information."
			  },
			"ShowValueFromOperation function (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "ShowValueFromOperation",
				"body": [
				"\t--[[",
				"\t\tShowValueFromOperation function",
				"\t\tThis function takes a searchKey as an argument, retrieves the current operations ID value in the CAM Tree,",
				"\t\titerates through the returned table and returns the value of the key or subkey that matches the searchKey.",
				"\t\tIf the key or subkey is not found, it returns nil.",
				"\t\tUse ShowOperationData function to find out to key you need to use",
				"\t]]",
				"\tfunction ShowValueFromOperation(searchKey)",
				"\t\t-- Get the current operations ID value in the CAM Tree",
				"\t\top_id = BcPost.GetValueOfOperation(\"ID\")",
				"",
				"\t\tretTable = Bcc.GetCamObjParameters(op_id)",
				"",
				"\t\t-- Iterate through the table",
				"\t\tfor key, value in pairs(retTable) do",
				"\t\t\t-- Check if the key matches the search key",
				"\t\t\tif key == searchKey then",
				"\t\t\t\treturn value",
				"\t\t\tend",
				"",
				"\t\t\t-- Check if value is a table",
				"\t\t\tif type(value) == \"table\" then",
				"\t\t\t\t-- If it's a table, iterate through it",
				"\t\t\t\tfor k, v in pairs(value) do",
				"\t\t\t\t\t-- Check if the subkey matches the search key",
				"\t\t\t\t\tif k == searchKey then",
				"\t\t\t\t\t\treturn v",
				"\t\t\t\t\tend",
				"\t\t\t\tend",
				"\t\t\tend",
				"\t\tend",
				"",
				"\t\t-- If the key or subkey was not found, return nil",
				"\t\treturn nil",
				"\tend",
				"",
				"\tShowOperationData()",
				"",
				"\t-- Call the function with the key or subkey you want to find",
				"\tvalue = ShowValueFromOperation(\"thread_pitch\")",
				"",
				"\t-- Check if a value was found",
				"\tif value then",
				"\t\tBcc.ShowMessageBox(\"Thread Pitch: \" .. tostring(value), {Title=\"Value from Toolpath Operation\"})",
				"\telse",
				"\t\tBcc.ShowMessageBox(\"Key or subkey not found\", {Title=\"Error\"})",
				"\tend"
				],
				"description": "BobCAD Post Lua API: This snippet retrieves a value from the operation data in the CAM Tree."
			},
			"separate lua function (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "lua_func_FunctionName",
				"body": [
					"lua_func_${1:FunctionName}"						
				],
				"description": "BobCAD Lua API: FunctionName: This is a separate lua function that you create in a .lua file that can be called from the post processor. create a folder in one of the following directorys Posts\\Mill, Posts\\Lathe, or Posts\\MillTurn. Then, add the following post question to your post processor: 732. Lua sub folder? \"MySubFolder\". You can then create a lua file (eg. MyLua.lua) inside \"MySubFolder\" folder with a list of all functions and call it in your normal post blocks with lua_func_FunctionName."
			},
			"Show Message Once (BobCAD / Lua)": {
				"scope": "bcpst, lua",
				"prefix": "Bcc.ShowMessageBox (once)",
				"body": [
					"2701. Lua Block 1.",
					"\t-- Initialize Message",
					"\tBcPost.RunVBApi(\"MILL_SetIntMemoryLoc\", {0, 0})",
					"\t",
					"2702. Lua Block 2.",
					"\tErrorMessageShown = BcPost.RunVBApi(\"MILL_GetIntMemoryLoc\", 0)",
					"\t-- Bcc.ShowMessageBox(ErrorMessageShown)",
					"\tif ErrorMessageShown == 0 then",
					"\t\tBcc.ShowMessageBox(\"myMessage\")",
					"\t\tBcPost.RunVBApi(\"MILL_SetIntMemoryLoc\", {0, 1})",
					"\tend"
				],
				"description": "BobCAD Lua API: Place lua_block_1 in post block '0. File Header' and lua_block_2 in any post block where you want the message. This is useful if your post block is being called many times when posting the code so that you do not have to click 'OK' thousand times."
			},
			"Show Message Once (BobCAD / VBScript)": {
				"scope": "bcpst",
				"prefix": "MsgBox (once)",
				"body": [
					"2001. Program Block 1.",
					"\t'Set Message",
					"\tCALL MILL_SetIntMemoryLoc(0, 0)",
					"\t",
					"2002. Program Block 2.",
					"\tErrorMessageShown = MILL_GetIntMemoryLoc(0)",
					"\tIF ErrorMessageShown = 0 THEN",
					"\t\tMsgBox(\"myMessage\")",
					"\t\tCALL MILL_SetIntMemoryLoc(0, 1)",
					"\tEND IF"
				],
				"description": "BobCAD VBScript API: Place program_block_1 in post block '0. File Header' and program_block_2 in any post block where you want the message. This is useful if your post block is being called many times when posting the code so that you do not have to click 'OK' thousand times."
			}
}